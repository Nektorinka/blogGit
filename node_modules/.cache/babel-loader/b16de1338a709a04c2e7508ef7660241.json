{"ast":null,"code":"export default class ServiceApi {\n  constructor() {\n    this.base = 'https://conduit.productionready.io/api/';\n  }\n\n  async getArticles(page = 1) {\n    const offset = page * 20 - 20;\n\n    try {\n      const response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`);\n      return await response.json();\n    } catch (error) {\n      const response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`);\n      const res = await response.json();\n      return res;\n    }\n  }\n\n  async getAutArticles(page = 0, token = null) {\n    const offset = page * 20 - 20;\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${token}`\n    };\n\n    if (token !== null) {\n      try {\n        const response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`, {\n          method: 'GET',\n          headers\n        });\n        return await response.json();\n      } catch (error) {\n        const response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`, {\n          method: 'GET',\n          headers\n        });\n        const res = await response.json();\n        return res;\n      }\n    } else {\n      try {\n        const response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`);\n        return await response.json();\n      } catch (error) {\n        const response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`);\n        const res = await response.json();\n        return res;\n      }\n    }\n  }\n\n  async getFullArticle(slug, token = null) {\n    if (token) {\n      const headers = {\n        'Content-Type': 'application/json',\n        Authorization: `Token ${token}`\n      };\n\n      try {\n        const response = await fetch(`${this.base}articles/${slug}`, {\n          method: 'GET',\n          headers\n        });\n        return await response.json();\n      } catch (error) {\n        const response = await fetch(`${this.base}articles/${slug}`, {\n          method: 'GET',\n          headers\n        });\n        const res = await response.json();\n        return res;\n      }\n    } else {\n      try {\n        const response = await fetch(`${this.base}articles/${slug}`);\n        return await response.json();\n      } catch (error) {\n        const response = await fetch(`${this.base}articles/${slug}`);\n        const res = await response.json();\n        return res;\n      }\n    }\n  }\n\n  async signUp(body) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    return fetch(`https://conduit.productionready.io/api/users`, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    }).then(response => {\n      return response.json();\n    });\n  }\n\n  async sigIn(body) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    return fetch(`https://conduit.productionready.io/api/users/login`, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    }).then(response => {\n      return response.json();\n    });\n  }\n\n  async setLike(slug, token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${token}`\n    };\n\n    try {\n      return fetch(`https://conduit.productionready.io/api/articles/${slug}/favorite`, {\n        method: 'POST',\n        headers\n      }).then(response => {\n        return response.json();\n      });\n    } catch (error) {\n      return fetch(`https://conduit.productionready.io/api/articles/${slug}/favorite`, {\n        method: 'POST',\n        headers\n      }).then(response => {\n        return response.json();\n      });\n    }\n  }\n\n  async unsetLike(slug, token = null) {\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${token}`\n    };\n\n    try {\n      return fetch(`https://conduit.productionready.io/api/articles/${slug}/favorite`, {\n        method: 'DELETE',\n        headers\n      }).then(response => {\n        return response.json();\n      });\n    } catch (error) {\n      return fetch(`https://conduit.productionready.io/api/articles/${slug}/favorite`, {\n        method: 'DELETE',\n        headers\n      }).then(response => {\n        return response.json();\n      });\n    }\n  }\n\n  async updateUser(data, token) {\n    const {\n      email,\n      url,\n      username,\n      password\n    } = data;\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${token}`\n    };\n    const body = {\n      user: {\n        email,\n        image: url,\n        username,\n        password\n      }\n    };\n\n    try {\n      return fetch(`https://conduit.productionready.io/api/user`, {\n        method: 'PUT',\n        headers,\n        body: JSON.stringify(body)\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        return null;\n      });\n    } catch (error) {\n      return fetch(`https://conduit.productionready.io/api/user`, {\n        method: 'PUT',\n        headers,\n        body: JSON.stringify(body)\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        return null;\n      });\n    }\n  }\n\n  async createArticle(token, {\n    title,\n    shortDescription,\n    text,\n    tags\n  }) {\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${token}`\n    };\n    const bodyReq = {\n      article: {\n        title,\n        description: shortDescription,\n        body: text,\n        tagList: tags\n      }\n    };\n\n    try {\n      const response = await fetch(`https://conduit.productionready.io/api/articles`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(bodyReq)\n      });\n\n      if (response.ok) {\n        return response.json();\n      }\n\n      return null;\n    } catch (error) {\n      const response = await fetch(`https://conduit.productionready.io/api/articles`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(bodyReq)\n      });\n\n      if (response.ok) {\n        return response.json();\n      }\n\n      return null;\n    }\n  }\n\n  async deleteArticle(token, slug) {\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${token}`\n    };\n\n    try {\n      const response = await fetch(`https://conduit.productionready.io/api/articles/${slug}`, {\n        method: 'DELETE',\n        headers\n      });\n\n      if (response.ok) {\n        return response.json();\n      }\n\n      return null;\n    } catch (error) {\n      const response = await fetch(`https://conduit.productionready.io/api/articles/${slug}`, {\n        method: 'DELETE',\n        headers\n      });\n\n      if (response.ok) {\n        return response.json();\n      }\n\n      return null;\n    }\n  }\n\n  async editArticle(token, slug, data) {\n    const {\n      title,\n      shortDescription,\n      tags,\n      text\n    } = data;\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Token ${token}`\n    };\n    const body = {\n      article: {\n        title,\n        description: shortDescription,\n        tagList: tags,\n        body: text\n      }\n    };\n\n    try {\n      const response = await fetch(`https://conduit.productionready.io/api/articles/${slug}`, {\n        method: 'PUT',\n        headers,\n        body: JSON.stringify(body)\n      });\n\n      if (response.ok) {\n        return response.json();\n      }\n\n      return null;\n    } catch (error) {\n      const response = await fetch(`https://conduit.productionready.io/api/articles/${slug}`, {\n        method: 'PUT',\n        headers,\n        body: JSON.stringify(body)\n      });\n\n      if (response.ok) {\n        return response.json();\n      }\n\n      return null;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/apple/Documents/GIT/blogGit/blogGit/src/services/serviceApi.js"],"names":["ServiceApi","constructor","base","getArticles","page","offset","response","fetch","json","error","res","getAutArticles","token","headers","Authorization","method","getFullArticle","slug","signUp","body","JSON","stringify","then","sigIn","setLike","unsetLike","updateUser","data","email","url","username","password","user","image","ok","createArticle","title","shortDescription","text","tags","bodyReq","article","description","tagList","deleteArticle","editArticle"],"mappings":"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","sourcesContent":["export default class ServiceApi {\n\tconstructor() {\n\t\tthis.base = 'https://conduit.productionready.io/api/';\n\t}\n\n\tasync getArticles(page = 1) {\n\t\tconst offset = page * 20 - 20;\n\t\ttry {\n\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`);\n\t\t\treturn await response.json();\n\t\t} catch (error) {\n\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`);\n\t\t\tconst res = await response.json();\n\t\t\treturn res;\n\t\t}\n\t}\n\n\tasync getAutArticles(page = 0, token = null) {\n\t\tconst offset = page * 20 - 20;\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Token ${token}`\n\t\t};\n\t\tif (token !== null) {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders\n\t\t\t\t});\n\t\t\t\treturn await response.json();\n\t\t\t} catch (error) {\n\t\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders\n\t\t\t\t});\n\t\t\t\tconst res = await response.json();\n\t\t\t\treturn res;\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`);\n\t\t\t\treturn await response.json();\n\t\t\t} catch (error) {\n\t\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles?offset=${offset}`);\n\t\t\t\tconst res = await response.json();\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getFullArticle(slug, token = null) {\n\t\tif (token) {\n\t\t\tconst headers = {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Token ${token}`\n\t\t\t};\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(`${this.base}articles/${slug}`, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders\n\t\t\t\t});\n\t\t\t\treturn await response.json();\n\t\t\t} catch (error) {\n\t\t\t\tconst response = await fetch(`${this.base}articles/${slug}`, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders\n\t\t\t\t});\n\t\t\t\tconst res = await response.json();\n\t\t\t\treturn res;\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(`${this.base}articles/${slug}`);\n\t\t\t\treturn await response.json();\n\t\t\t} catch (error) {\n\t\t\t\tconst response = await fetch(`${this.base}articles/${slug}`);\n\t\t\t\tconst res = await response.json();\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync signUp(body) {\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json'\n\t\t};\n\t\treturn fetch(`https://conduit.productionready.io/api/users`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(body),\n\t\t\theaders\n\t\t}).then((response) => {\n\t\t\treturn response.json();\n\t\t});\n\t}\n\n\tasync sigIn(body) {\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json'\n\t\t};\n\t\treturn fetch(`https://conduit.productionready.io/api/users/login`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(body),\n\t\t\theaders\n\t\t}).then((response) => {\n\t\t\treturn response.json();\n\t\t});\n\t}\n\n\tasync setLike(slug, token = null) {\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Token ${token}`\n\t\t};\n\t\ttry {\n\t\t\treturn fetch(`https://conduit.productionready.io/api/articles/${slug}/favorite`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders\n\t\t\t}).then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t});\n\t\t} catch (error) {\n\t\t\treturn fetch(`https://conduit.productionready.io/api/articles/${slug}/favorite`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders\n\t\t\t}).then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t});\n\t\t}\n\t}\n\n\tasync unsetLike(slug, token = null) {\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Token ${token}`\n\t\t};\n\t\ttry {\n\t\t\treturn fetch(`https://conduit.productionready.io/api/articles/${slug}/favorite`, {\n\t\t\t\tmethod: 'DELETE',\n\t\t\t\theaders\n\t\t\t}).then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t});\n\t\t} catch (error) {\n\t\t\treturn fetch(`https://conduit.productionready.io/api/articles/${slug}/favorite`, {\n\t\t\t\tmethod: 'DELETE',\n\t\t\t\theaders\n\t\t\t}).then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t});\n\t\t}\n\t}\n\n\tasync updateUser(data, token) {\n\t\tconst { email, url, username, password } = data;\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Token ${token}`\n\t\t};\n\t\tconst body = {\n\t\t\tuser: {\n\t\t\t\temail,\n\t\t\t\timage: url,\n\t\t\t\tusername,\n\t\t\t\tpassword\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\treturn fetch(`https://conduit.productionready.io/api/user`, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders,\n\t\t\t\tbody: JSON.stringify(body)\n\t\t\t}).then((response) => {\n\t\t\t\tif (response.ok) {\n\t\t\t\t\treturn response.json();\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\treturn fetch(`https://conduit.productionready.io/api/user`, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders,\n\t\t\t\tbody: JSON.stringify(body)\n\t\t\t}).then((response) => {\n\t\t\t\tif (response.ok) {\n\t\t\t\t\treturn response.json();\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t});\n\t\t}\n\t}\n\n\tasync createArticle(token, { title, shortDescription, text, tags }) {\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Token ${token}`\n\t\t};\n\t\tconst bodyReq = {\n\t\t\tarticle: {\n\t\t\t\ttitle,\n\t\t\t\tdescription: shortDescription,\n\t\t\t\tbody: text,\n\t\t\t\ttagList: tags\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders,\n\t\t\t\tbody: JSON.stringify(bodyReq)\n\t\t\t});\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders,\n\t\t\t\tbody: JSON.stringify(bodyReq)\n\t\t\t});\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tasync deleteArticle(token, slug) {\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Token ${token}`\n\t\t};\n\t\ttry {\n\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles/${slug}`, {\n\t\t\t\tmethod: 'DELETE',\n\t\t\t\theaders\n\t\t\t});\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles/${slug}`, {\n\t\t\t\tmethod: 'DELETE',\n\t\t\t\theaders\n\t\t\t});\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tasync editArticle(token, slug, data) {\n\t\tconst { title, shortDescription, tags, text } = data;\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Token ${token}`\n\t\t};\n\t\tconst body = {\n\t\t\tarticle: {\n\t\t\t\ttitle,\n\t\t\t\tdescription: shortDescription,\n\t\t\t\ttagList: tags,\n\t\t\t\tbody: text\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles/${slug}`, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders,\n\t\t\t\tbody: JSON.stringify(body)\n\t\t\t});\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tconst response = await fetch(`https://conduit.productionready.io/api/articles/${slug}`, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders,\n\t\t\t\tbody: JSON.stringify(body)\n\t\t\t});\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}